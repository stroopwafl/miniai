# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/miniai',
                'doc_host': 'https://stroopwafl.github.io',
                'git_url': 'https://github.com/stroopwafl/miniai',
                'lib_path': 'miniai'},
  'syms': { 'miniai.accel': { 'miniai.accel.Adam': ('accel_sgd.html#adam', 'miniai/accel.py'),
                              'miniai.accel.Adam.__init__': ('accel_sgd.html#adam.__init__', 'miniai/accel.py'),
                              'miniai.accel.Adam.opt_step': ('accel_sgd.html#adam.opt_step', 'miniai/accel.py'),
                              'miniai.accel.CosineAnneal': ('accel_sgd.html#cosineanneal', 'miniai/accel.py'),
                              'miniai.accel.ExponentialAnneal': ('accel_sgd.html#exponentialanneal', 'miniai/accel.py'),
                              'miniai.accel.LRScheduler': ('accel_sgd.html#lrscheduler', 'miniai/accel.py'),
                              'miniai.accel.LRScheduler.__init__': ('accel_sgd.html#lrscheduler.__init__', 'miniai/accel.py'),
                              'miniai.accel.LRScheduler.after_batch': ('accel_sgd.html#lrscheduler.after_batch', 'miniai/accel.py'),
                              'miniai.accel.LRScheduler.before_fit': ('accel_sgd.html#lrscheduler.before_fit', 'miniai/accel.py'),
                              'miniai.accel.LinearAnneal': ('accel_sgd.html#linearanneal', 'miniai/accel.py'),
                              'miniai.accel.SGD': ('accel_sgd.html#sgd', 'miniai/accel.py'),
                              'miniai.accel.SGD.__init__': ('accel_sgd.html#sgd.__init__', 'miniai/accel.py'),
                              'miniai.accel.SGD.opt_step': ('accel_sgd.html#sgd.opt_step', 'miniai/accel.py'),
                              'miniai.accel.SGD.reg_step': ('accel_sgd.html#sgd.reg_step', 'miniai/accel.py'),
                              'miniai.accel.SGD.step': ('accel_sgd.html#sgd.step', 'miniai/accel.py'),
                              'miniai.accel.SGD.zero_grad': ('accel_sgd.html#sgd.zero_grad', 'miniai/accel.py'),
                              'miniai.accel.SingleBatch': ('accel_sgd.html#singlebatch', 'miniai/accel.py'),
                              'miniai.accel.SingleBatch.__init__': ('accel_sgd.html#singlebatch.__init__', 'miniai/accel.py'),
                              'miniai.accel.SingleBatch.after_batch': ('accel_sgd.html#singlebatch.after_batch', 'miniai/accel.py'),
                              'miniai.accel._LRSched': ('accel_sgd.html#_lrsched', 'miniai/accel.py'),
                              'miniai.accel._LRSched.__init__': ('accel_sgd.html#_lrsched.__init__', 'miniai/accel.py'),
                              'miniai.accel._LRSched.step': ('accel_sgd.html#_lrsched.step', 'miniai/accel.py'),
                              'miniai.accel.set_seed': ('accel_sgd.html#set_seed', 'miniai/accel.py')},
            'miniai.activations': { 'miniai.activations.ActivationStats': ('activations.html#activationstats', 'miniai/activations.py'),
                                    'miniai.activations.ActivationStats.__init__': ( 'activations.html#activationstats.__init__',
                                                                                     'miniai/activations.py'),
                                    'miniai.activations.ActivationStats.__iter__': ( 'activations.html#activationstats.__iter__',
                                                                                     'miniai/activations.py'),
                                    'miniai.activations.ActivationStats.__len__': ( 'activations.html#activationstats.__len__',
                                                                                    'miniai/activations.py'),
                                    'miniai.activations.ActivationStats.before_fit': ( 'activations.html#activationstats.before_fit',
                                                                                       'miniai/activations.py'),
                                    'miniai.activations.ActivationStats.color_dim': ( 'activations.html#activationstats.color_dim',
                                                                                      'miniai/activations.py'),
                                    'miniai.activations.ActivationStats.dead_chart': ( 'activations.html#activationstats.dead_chart',
                                                                                       'miniai/activations.py'),
                                    'miniai.activations.ActivationStats.mean_std': ( 'activations.html#activationstats.mean_std',
                                                                                     'miniai/activations.py'),
                                    'miniai.activations.Hook': ('activations.html#hook', 'miniai/activations.py'),
                                    'miniai.activations.Hook.__del__': ('activations.html#hook.__del__', 'miniai/activations.py'),
                                    'miniai.activations.Hook.__init__': ('activations.html#hook.__init__', 'miniai/activations.py'),
                                    'miniai.activations.Hook.remove': ('activations.html#hook.remove', 'miniai/activations.py'),
                                    'miniai.activations.Hooks': ('activations.html#hooks', 'miniai/activations.py'),
                                    'miniai.activations.Hooks.__del__': ('activations.html#hooks.__del__', 'miniai/activations.py'),
                                    'miniai.activations.Hooks.__delitem__': ('activations.html#hooks.__delitem__', 'miniai/activations.py'),
                                    'miniai.activations.Hooks.__enter__': ('activations.html#hooks.__enter__', 'miniai/activations.py'),
                                    'miniai.activations.Hooks.__exit__': ('activations.html#hooks.__exit__', 'miniai/activations.py'),
                                    'miniai.activations.Hooks.__init__': ('activations.html#hooks.__init__', 'miniai/activations.py'),
                                    'miniai.activations.Hooks.remove': ('activations.html#hooks.remove', 'miniai/activations.py'),
                                    'miniai.activations.append_stats': ('activations.html#append_stats', 'miniai/activations.py'),
                                    'miniai.activations.get_hist': ('activations.html#get_hist', 'miniai/activations.py'),
                                    'miniai.activations.get_min': ('activations.html#get_min', 'miniai/activations.py')},
            'miniai.conv': { 'miniai.conv.BottleneckBlock': ('conv.html#bottleneckblock', 'miniai/conv.py'),
                             'miniai.conv.BottleneckBlock.__init__': ('conv.html#bottleneckblock.__init__', 'miniai/conv.py'),
                             'miniai.conv.BottleneckBlock.forward': ('conv.html#bottleneckblock.forward', 'miniai/conv.py'),
                             'miniai.conv.ConvNormAct': ('conv.html#convnormact', 'miniai/conv.py'),
                             'miniai.conv.ConvNormAct.__init__': ('conv.html#convnormact.__init__', 'miniai/conv.py'),
                             'miniai.conv.ConvNormAct.forward': ('conv.html#convnormact.forward', 'miniai/conv.py'),
                             'miniai.conv.ResnetNN': ('conv.html#resnetnn', 'miniai/conv.py'),
                             'miniai.conv.ResnetNN.__init__': ('conv.html#resnetnn.__init__', 'miniai/conv.py'),
                             'miniai.conv.ResnetNN.forward': ('conv.html#resnetnn.forward', 'miniai/conv.py'),
                             'miniai.conv.ResnetStage': ('conv.html#resnetstage', 'miniai/conv.py'),
                             'miniai.conv.ResnetStage.__init__': ('conv.html#resnetstage.__init__', 'miniai/conv.py'),
                             'miniai.conv.ResnetStem': ('conv.html#resnetstem', 'miniai/conv.py'),
                             'miniai.conv.ResnetStem.__init__': ('conv.html#resnetstem.__init__', 'miniai/conv.py')},
            'miniai.core': { 'miniai.core.clean_gpu': ('core.html#clean_gpu', 'miniai/core.py'),
                             'miniai.core.clean_ipython_hist': ('core.html#clean_ipython_hist', 'miniai/core.py'),
                             'miniai.core.clean_tb': ('core.html#clean_tb', 'miniai/core.py')},
            'miniai.datasets': { 'miniai.datasets.DataLoaders': ('datasets.html#dataloaders', 'miniai/datasets.py'),
                                 'miniai.datasets.DataLoaders.__init__': ('datasets.html#dataloaders.__init__', 'miniai/datasets.py'),
                                 'miniai.datasets.DataLoaders.from_dd': ('datasets.html#dataloaders.from_dd', 'miniai/datasets.py'),
                                 'miniai.datasets.collate_dict': ('datasets.html#collate_dict', 'miniai/datasets.py'),
                                 'miniai.datasets.inplace': ('datasets.html#inplace', 'miniai/datasets.py')},
            'miniai.initialisation': { 'miniai.initialisation.BatchNorm': ('initialisation.html#batchnorm', 'miniai/initialisation.py'),
                                       'miniai.initialisation.BatchNorm.__init__': ( 'initialisation.html#batchnorm.__init__',
                                                                                     'miniai/initialisation.py'),
                                       'miniai.initialisation.BatchNorm.forward': ( 'initialisation.html#batchnorm.forward',
                                                                                    'miniai/initialisation.py'),
                                       'miniai.initialisation.BatchNorm.update': ( 'initialisation.html#batchnorm.update',
                                                                                   'miniai/initialisation.py'),
                                       'miniai.initialisation.BatchTransform': ( 'initialisation.html#batchtransform',
                                                                                 'miniai/initialisation.py'),
                                       'miniai.initialisation.BatchTransform.__init__': ( 'initialisation.html#batchtransform.__init__',
                                                                                          'miniai/initialisation.py'),
                                       'miniai.initialisation.BatchTransform.before_batch': ( 'initialisation.html#batchtransform.before_batch',
                                                                                              'miniai/initialisation.py'),
                                       'miniai.initialisation.GeneralReLU': ('initialisation.html#generalrelu', 'miniai/initialisation.py'),
                                       'miniai.initialisation.GeneralReLU.__init__': ( 'initialisation.html#generalrelu.__init__',
                                                                                       'miniai/initialisation.py'),
                                       'miniai.initialisation.GeneralReLU.forward': ( 'initialisation.html#generalrelu.forward',
                                                                                      'miniai/initialisation.py'),
                                       'miniai.initialisation.LSUVInit': ('initialisation.html#lsuvinit', 'miniai/initialisation.py'),
                                       'miniai.initialisation.LSUVInit.__init__': ( 'initialisation.html#lsuvinit.__init__',
                                                                                    'miniai/initialisation.py'),
                                       'miniai.initialisation.LSUVInit._del': ( 'initialisation.html#lsuvinit._del',
                                                                                'miniai/initialisation.py'),
                                       'miniai.initialisation.LSUVInit.before_fit': ( 'initialisation.html#lsuvinit.before_fit',
                                                                                      'miniai/initialisation.py'),
                                       'miniai.initialisation.LayerNorm': ('initialisation.html#layernorm', 'miniai/initialisation.py'),
                                       'miniai.initialisation.LayerNorm.__init__': ( 'initialisation.html#layernorm.__init__',
                                                                                     'miniai/initialisation.py'),
                                       'miniai.initialisation.LayerNorm.forward': ( 'initialisation.html#layernorm.forward',
                                                                                    'miniai/initialisation.py'),
                                       'miniai.initialisation.kaiming_init': ( 'initialisation.html#kaiming_init',
                                                                               'miniai/initialisation.py'),
                                       'miniai.initialisation.lsuv_init': ('initialisation.html#lsuv_init', 'miniai/initialisation.py'),
                                       'miniai.initialisation.lsuv_stats': ('initialisation.html#lsuv_stats', 'miniai/initialisation.py'),
                                       'miniai.initialisation.normalise_batch': ( 'initialisation.html#normalise_batch',
                                                                                  'miniai/initialisation.py'),
                                       'miniai.initialisation.xavier_init': ( 'initialisation.html#xavier_init',
                                                                              'miniai/initialisation.py')},
            'miniai.learner': { 'miniai.learner.BaseLearner': ('learner.html#baselearner', 'miniai/learner.py'),
                                'miniai.learner.BaseLearner.backward': ('learner.html#baselearner.backward', 'miniai/learner.py'),
                                'miniai.learner.BaseLearner.get_loss': ('learner.html#baselearner.get_loss', 'miniai/learner.py'),
                                'miniai.learner.BaseLearner.predict': ('learner.html#baselearner.predict', 'miniai/learner.py'),
                                'miniai.learner.BaseLearner.step': ('learner.html#baselearner.step', 'miniai/learner.py'),
                                'miniai.learner.BaseLearner.zero_grad': ('learner.html#baselearner.zero_grad', 'miniai/learner.py'),
                                'miniai.learner.Callback': ('learner.html#callback', 'miniai/learner.py'),
                                'miniai.learner.CancelBatchException': ('learner.html#cancelbatchexception', 'miniai/learner.py'),
                                'miniai.learner.CancelEpochException': ('learner.html#cancelepochexception', 'miniai/learner.py'),
                                'miniai.learner.CancelFitException': ('learner.html#cancelfitexception', 'miniai/learner.py'),
                                'miniai.learner.CancelFull_EpochException': ('learner.html#cancelfull_epochexception', 'miniai/learner.py'),
                                'miniai.learner.DeviceCB': ('learner.html#devicecb', 'miniai/learner.py'),
                                'miniai.learner.DeviceCB.__init__': ('learner.html#devicecb.__init__', 'miniai/learner.py'),
                                'miniai.learner.DeviceCB.before_batch': ('learner.html#devicecb.before_batch', 'miniai/learner.py'),
                                'miniai.learner.DeviceCB.before_fit': ('learner.html#devicecb.before_fit', 'miniai/learner.py'),
                                'miniai.learner.LRFinderCB': ('learner.html#lrfindercb', 'miniai/learner.py'),
                                'miniai.learner.LRFinderCB.__init__': ('learner.html#lrfindercb.__init__', 'miniai/learner.py'),
                                'miniai.learner.LRFinderCB.after_batch': ('learner.html#lrfindercb.after_batch', 'miniai/learner.py'),
                                'miniai.learner.LRFinderCB.before_fit': ('learner.html#lrfindercb.before_fit', 'miniai/learner.py'),
                                'miniai.learner.Learner': ('learner.html#learner', 'miniai/learner.py'),
                                'miniai.learner.Learner.__init__': ('learner.html#learner.__init__', 'miniai/learner.py'),
                                'miniai.learner.Learner._one_batch': ('learner.html#learner._one_batch', 'miniai/learner.py'),
                                'miniai.learner.Learner._one_epoch': ('learner.html#learner._one_epoch', 'miniai/learner.py'),
                                'miniai.learner.Learner.callback': ('learner.html#learner.callback', 'miniai/learner.py'),
                                'miniai.learner.Learner.callback_context': ('learner.html#learner.callback_context', 'miniai/learner.py'),
                                'miniai.learner.Learner.fit': ('learner.html#learner.fit', 'miniai/learner.py'),
                                'miniai.learner.Learner.lr_find': ('learner.html#learner.lr_find', 'miniai/learner.py'),
                                'miniai.learner.MetricsCB': ('learner.html#metricscb', 'miniai/learner.py'),
                                'miniai.learner.MetricsCB.__init__': ('learner.html#metricscb.__init__', 'miniai/learner.py'),
                                'miniai.learner.MetricsCB._log': ('learner.html#metricscb._log', 'miniai/learner.py'),
                                'miniai.learner.MetricsCB.after_batch': ('learner.html#metricscb.after_batch', 'miniai/learner.py'),
                                'miniai.learner.MetricsCB.after_epoch': ('learner.html#metricscb.after_epoch', 'miniai/learner.py'),
                                'miniai.learner.MetricsCB.after_full_epoch': ( 'learner.html#metricscb.after_full_epoch',
                                                                               'miniai/learner.py'),
                                'miniai.learner.MetricsCB.before_epoch': ('learner.html#metricscb.before_epoch', 'miniai/learner.py'),
                                'miniai.learner.MetricsCB.before_fit': ('learner.html#metricscb.before_fit', 'miniai/learner.py'),
                                'miniai.learner.MetricsCB.before_full_epoch': ( 'learner.html#metricscb.before_full_epoch',
                                                                                'miniai/learner.py'),
                                'miniai.learner.MomentumLearner': ('learner.html#momentumlearner', 'miniai/learner.py'),
                                'miniai.learner.MomentumLearner.__init__': ('learner.html#momentumlearner.__init__', 'miniai/learner.py'),
                                'miniai.learner.MomentumLearner.zero_grad': ('learner.html#momentumlearner.zero_grad', 'miniai/learner.py'),
                                'miniai.learner.ProgressCB': ('learner.html#progresscb', 'miniai/learner.py'),
                                'miniai.learner.ProgressCB.__init__': ('learner.html#progresscb.__init__', 'miniai/learner.py'),
                                'miniai.learner.ProgressCB._plot': ('learner.html#progresscb._plot', 'miniai/learner.py'),
                                'miniai.learner.ProgressCB.after_batch': ('learner.html#progresscb.after_batch', 'miniai/learner.py'),
                                'miniai.learner.ProgressCB.after_fit': ('learner.html#progresscb.after_fit', 'miniai/learner.py'),
                                'miniai.learner.ProgressCB.before_epoch': ('learner.html#progresscb.before_epoch', 'miniai/learner.py'),
                                'miniai.learner.ProgressCB.before_fit': ('learner.html#progresscb.before_fit', 'miniai/learner.py'),
                                'miniai.learner.get_device': ('learner.html#get_device', 'miniai/learner.py'),
                                'miniai.learner.to_cpu': ('learner.html#to_cpu', 'miniai/learner.py')},
            'miniai.test': {'miniai.test.test': ('test.html#test', 'miniai/test.py')}}}
